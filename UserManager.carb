#include "src/server/entities"
#include "src/server/adapters"

namespace UserManager {}

class UserManager.Module extends Websom.Module, Websom.Standard.UserSystem.Module {
	public Websom.Permission userCreate = null;
	public Websom.Permission userGet = null;
	public Websom.Permission loginView = null;

	Websom.Calculators.KeyCount groupCounts = null;

	override Websom.Status start() {
		this.server.confirmation.handleConfirmation("emailVerification", void (Websom.Adapters.Confirmation.Execution exec) => {
			let string id = exec.storage["id"];
			let UserManager.User user = this.users.getEntity(id);

			user.verified = true;

			user.saveToCollection();
		});

		this.server.confirmation.handleConfirmation("passwordReset", void (Websom.Adapters.Confirmation.Execution exec) => {
			let string id = exec.storage["id"];
			let UserManager.User user = this.users.getEntity(id);

			if (exec.params == null or exec.params.typeAsString() != "map") {
				exec.request.endWithError("Invalid params");
				return null;
			}

			let string newPassword = exec.params["password"];

			if (newPassword.typeAsString() == "string" and newPassword.length > 3 and newPassword.length < 256) {
				user.password = this.server.crypto.hashPassword(newPassword);

				user.saveToCollection();
			}else{
				exec.request.endWithError("Invalid password");
			}
		});
	}

	override void registerWithServer() {
		this.server.userSystem = this;
	}

	override void permissions() {
		this.userGet = new Websom.Permission("User.Get");
		this.userGet.description = "Allows the public to read users (username, and time created) querying on their id.";
		this.userGet.public = true;
		
		this.userCreate = new Websom.Permission("User.Create");
		this.userCreate.description = "Allows the public to create a user account.";
		this.userCreate.public = true;
		
		this.registerPermission(this.userCreate);
		this.registerPermission(this.userGet);

		this.loginView = new Websom.Permission("LoginAttempts.View");
		this.loginView.description = "Administrator view";
		
		this.registerPermission(this.loginView);
	}

	override UserManager.User getUserFromRequest(Websom.Request req) {
		let userId = req.session.get("user");

		if (userId == null)
			return null;

		let UserManager.User user = this.users.getEntity(userId);

		return user;
	}

	override void collections() {
		let bool verified = this.server.getConfigPrimitive("module.userSystem", "requireVerification");
		verified = verified == false;

		let db = this.server.database.central;

		this.users = db.collection("users");

		this.groupCounts = new Websom.Calculators.KeyCount("groups", "array");

		UserManager.User.applySchema(this.users)
			.calc("groupCounts", this.groupCounts)
			.index()
				.field("name", "==")
				.field("created", "dsc");
			
		this.registerCollection(this.users);

		this.logins = db.collection("logins");

		UserManager.Login.applySchema(this.logins)
			.index()
				.field("user", "==")
				.field("created", "dsc");

		this.registerCollection(this.logins);

		this.server.api.interface(this.logins, "/logins")
			.route("/search")
				.auth(this.loginView)
					.executes("select")
						.read("id")
						.read("user")
						.read("created")
						.read("id")
						.read("flagged")
						.read("success")
						.read("location")
						.read("ip")
						.filter("default")
						.filter("user")
							.field("user", "==");

		this.server.api.interface(this.users, "/users")
			.route("/create")
				.auth(this.userCreate)
				.executes("insert")
					.write("username")
						.format("single-line")
						.regexTest("^([A-Za-z0-9_-]*)$")
						.limit(3, 256)
						.unique()
					.write("password")
						.regexTest("^[ -~]*$")
						.limit(8, 256)
						.mutate(primitive (Websom.Adapters.Database.Collection collection, Websom.Request req, string value) => {
							return this.server.crypto.hashPassword(value);
						})
					.write("email")
						.format("email")
						.unique()
					.setComputed("created", uint64 (Websom.Request req) => {
						return Websom.Time.now();
					})
					.set("banned", false)
					.set("verified", verified)
					.set("locked", false)
					.set("connected", false)
					.set("connectedAdapter", "")
					.set("groups", new <string>array())			
			.route("/get")
				.auth(this.userGet)
				.executes("select")
					.read("username")
					.read("created")
					.read("id")
					.read("bio")
					.read("social")
					.read("nickname")
					.filter("default")
						.field("id", "==")
			.route("/login-info")
				.auth(this.userGet)
				.executes("select")
					.read("id")
					.read("username")
					.read("created")
					.read("email")
					.read("firstName")
					.read("lastName")
					.read("anonymous")
					.filter("default", void (Websom.Request req, Websom.Adapters.Database.SelectQuery query) => {
						let userId = req.session.get("user");

						if (userId == null) {
							req.endWithError("Not logged in");
							return null;
						}

						query.where("id", "==", userId);
					});

		this.server.api.route("/users/connection-sign-in")
			.auth(this.userCreate)
				.input("adapter")
					.type("string")
				.input("data")
					.type("map")
			.executes(void (Websom.APIContext ctx) => {
				let adapter = ctx.get("adapter");
				let map data = ctx.get("data");

				this.handleConnectionSignin(ctx.request, adapter, data);
			});

		this.server.api.route("/users/anonymous")
			.auth(this.userCreate)
			.executes(void (Websom.APIContext ctx) => {
				let tkn = this.server.crypto.getRandomHex(256);
				let res = this.users.insert()
					.set("anonymous", true)
					.set("anonymousToken", tkn)
					.set("created", Websom.Time.now())
					.set("banned", false)
					.set("verified", false)
					.set("locked", false)
					.set("connected", false)
					.set("connectedAdapter", "")
					.set("groups", new <string>array())
					.run();
					
				let usr = new UserManager.User();
				usr.id = res.id;

				this.logLogin(ctx.request.client.address, "", usr, true, false);
				ctx.request.session.set("user", usr.id);

				let data = new map();

				data["token"] = tkn;

				ctx.request.endWithData(data);
			});

		this.server.api.route("/logout")
			.executes(void (Websom.APIContext ctx) => {
				ctx.request.session.delete("user");
				ctx.request.endWithSuccess("Signed out");
			});

		this.server.api.route("/users/anonymous-login")
			.input("token")
				.type("string")
				.limit(128, 512)
			.executes(void (Websom.APIContext ctx) => {
				let users = this.users.select()
					.where("anonymous", "==", true)
					.where("anonymousToken", "==", ctx.get("token"))
					.get();

				if (users.documents.length > 0) {
					let UserManager.User usr = this.users.makeEntity(users.documents[0]);

					this.logLogin(ctx.request.client.address, "", usr, true, false);
					ctx.request.session.set("user", usr.id);
					let mp = new map();
					mp["message"] = "Login successful";

					let eData = new Websom.Standard.UserSystem.LoginEventData();
					eData.user = usr;
					eData.responseData = mp;
					eData.request = ctx.request;

					this.afterLogin.invoke(eData);

					ctx.request.endWithData(mp);
				}else{
					ctx.request.endWithError("Invalid token");
				}
			});

		this.server.api.route("/login")
			.input("login")
				.type("string")
				.limit(3, 256)
			.input("password")
				.type("string")
				.limit(8, 256)
			.executes(void (Websom.APIContext ctx) => {
				let string login = ctx.get("login");
				let string password = ctx.get("password");

				let emailValidator = new Websom.Restrictions.Format("email");

				let Websom.Adapters.Database.SelectQueryResult userResults = null;

				if (emailValidator.testServer(null, null, login)) {
					userResults = this.users.where("email", "==", login).get();
				}else{
					userResults = this.users.where("username", "==", login).get();
				}

				if (userResults.documents.length == 0) {
					ctx.request.endWithError("Invalid username or password");
					return null;
				}

				let UserManager.User user = this.users.makeEntity(userResults.documents[0]);

				let passedPassword = this.server.crypto.verifyPassword(user.password, password);

				if (user.verified == false) {
					let mp = new map();
					mp["id"] = user.id;
					ctx.request.endWithComponent("user-unverified-status", mp);

					return null;
				}

				if (user.connected) {
					ctx.request.endWithError("Please login using " + user.connectedAdapter);

					return null;
				}

				if (passedPassword) {
					this.logLogin(ctx.request.client.address, "", user, true, false);
					ctx.request.session.set("user", user.id);
					let mp = new map();
					mp["message"] = "Login successful";

					let eData = new Websom.Standard.UserSystem.LoginEventData();
					eData.user = user;
					eData.responseData = mp;
					eData.request = ctx.request;

					this.afterLogin.invoke(eData);

					ctx.request.endWithData(mp);
				}else{
					this.logLogin(ctx.request.client.address, "", user, false, false);
					ctx.request.endWithError("Invalid username or password");
				}
			});

		this.server.api.route("/resend-verification-email")
			.input("id")
				.type("string")
				.limit(1, 255)
			.executes(void (Websom.APIContext ctx) => {
				let UserManager.User user = this.users.getEntity(ctx.get("id"));

				if (user == null) {
					ctx.request.endWithError("Invalid id");
					return null;
				}

				if (this.sendVerificationEmail(user)) {
					ctx.request.endWithSuccess("Verification sent");
				}else{
					ctx.request.endWithError("Error while sending verification");
				}
			});

		this.server.api.route("/reset-password")
			.input("email")
				.type("string")
				.format("email")
				.limit(1, 255)
			.executes(void (Websom.APIContext ctx) => {
				let string email = ctx.get("email");

				let docs = this.users.where("email", "==", email).get();
				if (docs.documents.length > 0) {
					let doc = this.users.makeEntity(docs.documents[0]);

					if (this.sendPasswordReset(doc) == false) {
						ctx.request.endWithError("Error while sending password reset.");
					}
				}

				ctx.request.endWithSuccess("Password reset sent! Please check your inbox.");
			});
	}

	bool sendVerificationEmail(UserManager.User user) {
		let mp = new map();
		mp["id"] = user.id;

		Console.log("Sending email to " + user.email);

		this.server.confirmation.confirm("emailVerification")
			.via("email")
			.using("link")
			.to(user.email)
			.store(mp)
			.subject("Email verification")
			.message("Click here to finalize your account verification.")
			.dispatch();
		
		return true;
	}

	bool sendPasswordReset(UserManager.User user) {
		let mp = new map();
		mp["id"] = user.id;

		this.server.confirmation.confirm("passwordReset")
			.via("email")
			.using("link")
			.to(user.email)
			.store(mp)
			.subject("Password Reset")
			.message("Click here to reset your password.")
			.dispatch();
		
		return true;
	}

	void logLogin(string ip, string location, UserManager.User user, bool success, bool flagged) {
		this.logins.insert()
			.set("created", Websom.Time.now())
			.set("ip", ip)
			.set("location", location)
			.set("user", user.id)
			.set("success", success)
			.set("flagged", flagged)
			.run();
	}

	void loginWithConnection(Websom.Request req, string adapter, UserManager.User user) {
		this.logLogin(req.client.address, "", user, true, false);
		req.session.set("user", user.id);
		req.endWithSuccess("Login successful");
	}

	void createUserWithConnection(Websom.Request req, string adapter, Websom.Adapters.UserSystem.ConnectionUser user) {
		let res = this.users.insert()
			.set("username", user.username)
			.set("firstName", user.firstName)
			.set("lastName", user.lastName)
			.set("password", "")
			.set("email", user.email)
			.set("created", Websom.Time.now())
			.set("banned", false)
			.set("verified", true)
			.set("locked", false)
			.set("connected", true)
			.set("connectedAdapter", adapter)
			.set("groups", new <string>array())
			.run();
		
		let userEntity = new UserManager.User();
		userEntity.id = res.id;
		userEntity.collection = this.users;

		this.loginWithConnection(req, adapter, userEntity);
	}

	void handleConnectionSignin(Websom.Request req, string adapter, map data) {
		let adapterInterface = this.server.adapt("connection");

		if (adapterInterface.loadAsBranchAdapter(adapter)) {
			let Websom.Adapters.UserSystem.Connection cAdapter = adapterInterface.adapter;

			let user = cAdapter.getUser(data);

			if (user == null) {
				req.endWithError("Authentication error");
				return null;
			}

			let userRes = this.users.where("email", "==", user.email).get();

			if (userRes.documents.length == 0) {
				this.createUserWithConnection(req, adapter, user);
			}else{
				let UserManager.User userEntity = this.users.makeEntity(userRes.documents[0]);

				if (userEntity.connected) {
					if (userEntity.connectedAdapter == adapter) {
						this.loginWithConnection(req, adapter, userEntity);
					}else{
						req.endWithError("Please sign in through " + adapter);
						return null;
					}
				}else{
					req.endWithError("Please sign in using your email and password");
					return null;
				}
			}
		}else{
			req.endWithError("Unknown adapter " + adapter);
		}
	}
}