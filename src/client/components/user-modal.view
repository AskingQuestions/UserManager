info {
	"name": "user-modal",
	"type": "component"
}

template {
	<div>
		<modal ref="modal" size="full" :modal-class="'center-content ' + modalClass">
			<card class="login-card">
				<div slot="body" class="login-container" :class="'login-container-' + (overrideMode || mode)">
					<div class="login-container-logo">
						<img :class="{'square-framed': profileImage}" :src="logo" />
						<h1>{{overrideMode || mode}}</h1>
					</div>
					<div class="login-main">
						<div class="login-slide">
							<transition name="slide">
								<div class="user-login" v-if="(overrideMode || mode) == 'login'" key="login">
									<api-form route="/login" :use-local-storage="useLocalStorage" ref="loginForm">
										<input-text name="username" placeholder="Username or Email" icon="user" v-model="login.username" />
										<input-text name="password" type="password" placeholder="Password" icon="key" v-model="login.password" />

										<button class="full user-login-button" @click="submitLogin()">Login</button>
									</api-form>

									<div class="mini-options">
										<a @click="setMode('reset')">Forgot your password?</a>
										<a @click="setMode('signup')">Don't have an account?</a>
									</div>

									<h3 v-if="signIns.length > 0" class="center-content">OR</h3>

									<div v-for="signIn in signIns" :key="'login' + signIn.name">
										<component @sign-in="signinWithConnection(signIn.name, $event)" :is="signIn.component" />
									</div>
								</div>
								<div class="user-signup" v-if="(overrideMode || mode) == 'signup'" key="signup">
									<loader :active="connectionSignupLoading">
										<api-form route="/users/create" ref="signupForm">
											<input-text name="username" placeholder="Username" icon="user" v-model="signup.username" validate="/users/create.username" />
											<input-text name="email" placeholder="Email" icon="email" v-model="signup.email" validate="/users/create.email" />
											<input-text name="password" type="password" placeholder="Password" icon="key" v-model="signup.password" validate="/users/create.password" />
											<input-text name="password" type="password" placeholder="Retype Password" icon="check" v-model="signup.passwordVerify" :validate="matchPasswords" />

											<button class="full user-login-button" @click="submitSignup()">Sign Up</button>
										</api-form>

										<div class="mini-options">
											<a>Need help?</a>
											<a @click="setMode('login')">Already have an account?</a>
										</div>

										<h3 v-if="signIns.length > 0" class="center-content">OR</h3>

										<div v-for="signIn in signIns" :key="'signup' + signIn.name">
											<component @sign-in="signupWithConnection(signIn.name, $event)" :is="signIn.component" />
										</div>
									</loader>
								</div>
								<div class="user-reset" v-if="(overrideMode || mode) == 'reset'" key="reset">
									<p style="margin-top: 0;">Lost your password? Submit your email below, and we will send a <i>password reset link</i> directly to your inbox.</p>
									<api-form route="/reset-password" ref="resetForm">
										<input-text name="email" placeholder="Email" icon="email" v-model="reset.email" />

										<button class="full user-login-button" @click="submitReset()">Reset</button>
									</api-form>

									<div class="mini-options">
										<a @click="setMode('login')">Go back</a>
										<a @click="setMode('signup')">Don't have an account?</a>
									</div>
								</div>
							</transition>
						</div>
					</div>

					<button v-if="cancelButton" class="user-cancel full mute" @click="cancel()">Cancel</button>
				</div>
			</card>
		</modal>
	</div>
}

script {
	export default {
		props: {
			mode: {
				type: String,
				default: "login"
			},
			cancelButton: {
				type: Boolean,
				default: true
			},
			"use-local-storage": {
				type: Boolean,
				default: false
			},
			modalClass: {
				type: String,
				default: ""
			}
		},
		data: () => ({
			profileImage: null,
			overrideMode: null,
			login: {
				username: "",
				password: ""
			},
			signup: {
				email: "",
				username: "",
				password: "",
				passwordVerify: ""
			},
			reset: {
				email: ""
			},
			connectionSignupLoading: false
		}),
		methods: {
			async signupWithConnection(adapter, data) {
				this.profileImage = data.image;
				this.connectionSignupLoading = true;

				let res = await this.websom.fetch("/users/connection-sign-in", {
					adapter: adapter,
					data: data
				});

				this.connectionSignupLoading = false;

				this.$refs.signupForm.setStatus(res);

				if (res.status == "success") {
					this.websom.trigger("userSystem.manualLogin");
					this.loginSuccess();
				}
			},
			async signinWithConnection(adapter, data) {
				this.profileImage = data.image;
				this.connectionSignupLoading = true;

				let res = await this.websom.fetch("/users/connection-sign-in", {
					adapter: adapter,
					data: data
				});

				this.connectionSignupLoading = false;

				this.$refs.loginForm.setStatus(res);

				if (res.status == "success") {
					this.websom.trigger("userSystem.manualLogin");
					await this.loginSuccess();
				}
			},
			open() {
				this.login.username = "";
				this.login.password = "";
				this.$refs.modal.open();
			},
			cancel() {
				this.login.username = "";
				this.login.password = "";

				this.$refs.modal.close();
			},
			setMode(mode) {
				this.profileImage = null;
				this.overrideMode = mode;
			},
			async loginSuccess() {
				this.$emit("success");

				await new Promise((res) => setTimeout(res, 500));

				if (await this.$store.dispatch("login", true))
					this.$refs.modal.close();
			},
			async submitLogin() {
				let res = await this.$refs.loginForm.submit({
					login: this.login.username,
					password: this.login.password
				});

				this.websom.trigger("userSystem.manualLogin");

				if (res.status == "success")
					await this.loginSuccess();
			},
			async submitReset() {
				let res = await this.$refs.resetForm.submit({
					email: this.reset.email
				});
			},
			async submitSignup() {
				let res = await this.$refs.signupForm.submit({
					document: this.signup
				});
				
				if (res.status == "success") {
					if (!this.websom.getConfig("module.userSystem", "requireVerification")) {
						this.login.username = this.signup.username;
						this.login.password = this.signup.password;
						this.overrideMode = "login";
						setTimeout(async () => {
							await this.submitLogin();
						}, 100);
					}
				}
			},
			matchPasswords(value) {
				if (value.length == 0)
					return "Invalid password";

				if (this.signup.password != value)
					return "Passwords do not match";

				return true;
			}
		},
		computed: {
			logo() {
				if (this.profileImage)
					return this.profileImage;

				if (this.$config.logo != "") {
					return this.$config.logo;
				}else{
					return this.websom.resolveAsset("websom", "logo");
				}
			},
			signIns() {
				return this.websom.getConfig("module.userSystem", "signInConnections")
					.map(adapter => ({name: adapter, component: this.websom.getComponentForAdapter(`${adapter}.signIn`)}));
			}
		}
	}
}

style {
	@media (max-width: 424px) {
		.login-card {
			margin: 0 !important;
		}
	}

	.login-container {
		width: 350px;
		height: 600px;

		overflow: hidden;

		position: relative;

		display: flex;
		flex-direction: column;

		justify-content: flex-start;

		@media (max-width: 424px) {
			width: calc(100vw - var(--base-size) * 2);
			height: calc(100vh - var(--base-size) * 2);
			padding: 0;
		}

		& > .login-container-logo {
			text-transform: capitalize;

			display: flex;
			flex-direction: column;
			align-items: center;
			justify-content: center;

			& > img {
				max-width: 50%;

				transition: var(--transition-movement) var(--transition-easing-movement);
			}
		}

		&.login-container-signup > .login-container-logo > img {
			max-width: 25%;
		}
	}

	.user-cancel {
		
	}

	.user-login-button {
		margin-top: var(--base-size);
	}

	.login-main {
		flex: 1;
	}

	.login-slide {
		height: 100%;
		overflow-y: auto;
		overflow-x: hidden;
		position: relative;

		& > * {
			position: absolute;
			top: 0;
			width: 100%;
		}
	}

	.slide-enter-active {
		transition: all var(--transition-movement) var(--transition-easing-movement);
	}

	.slide-leave-active {
		transition: all var(--transition-movement) var(--transition-easing-movement);
	}

	.slide-enter {
		transform: translateX(100%);
	}

	.slide-leave-to {
		transform: translateX(-100%);
	}
}

config {
	"options": {
		"logo": {
			"type": "string",
			"name": "Login modal image",
			"description": "The image to use on the login/signup screen",
			"default": "",
			"helper": "image"
		}
	}
}