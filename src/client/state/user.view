info {
	"type": "state",
	"name": "user"
}

script {
	export default websom => ({
		actions: {
			async logout(ctx) {
				ctx.commit("setUser", null);
				localStorage.removeItem("anonymous-token");
				await websom.fetch("/logout", {});
				console.log("Logout");
			},
			async login(ctx, overwrite) {
				if (!overwrite)
					if (ctx.rootState.userSystem.user)
						return true;

				if (ctx.rootState.userSystem.loadingUser) {
					return await new Promise((res) => {
						ctx.commit("hookLogin", res);
					});
				}

				let info = await websom.fetch("/users/login-info", {
					query: {},
					fields: {"*": true}
				});
				
				if (info.status == "success" && info.documents.length > 0) {
					ctx.commit("setUser", websom.makeEntity("/users", info.documents[0]));
					ctx.commit("triggerLoginHooks", true);
					websom.trigger("userSystem.login");
					return true;
				} else {
					ctx.commit("triggerLoginHooks", false);
					return false;
				}
			},
			async loginAnonymously(ctx) {
				if (!sessionStorage.getItem("Websom-Session") || !(await ctx.dispatch("login"))) {
					let tkn = localStorage.getItem("anonymous-token");

					if (!tkn) {
						let newUser = await websom.fetch("/users/anonymous");
						localStorage.setItem("anonymous-token", newUser.data.token);
						tkn = newUser.data.token;
						console.log("Created new anonymous user");
					}else{
						let res = await websom.fetch("/users/anonymous-login", {
							token: tkn
						});

						if (res.status == "success") {
							console.log("Anonymous login");
						}
					}

					await new Promise((res) => {
						setTimeout(() => {
							res();
						}, 300)
					});

					await ctx.dispatch("login");
				}
			},
			async hasLoginSaved() {
				console.log(sessionStorage.getItem("Websom-Session"));
				if (sessionStorage.getItem("Websom-Session")) {
					return true;
				}else{
					if (localStorage.getItem("anonymous-token")) {
						return true;
					}else{
						return false;
					}
				}
			}
		}
	})
}